<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vivimee</title>
  
  <subtitle>subtitle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vivimee.github.io/"/>
  <updated>2018-12-02T13:15:25.897Z</updated>
  <id>http://vivimee.github.io/</id>
  
  <author>
    <name>vivimee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>树的遍历</title>
    <link href="http://vivimee.github.io/2018/02/03/tree/"/>
    <id>http://vivimee.github.io/2018/02/03/tree/</id>
    <published>2018-02-03T10:03:19.000Z</published>
    <updated>2018-12-02T13:15:25.897Z</updated>
    
    <content type="html"><![CDATA[<p>复习一下树的遍历，以多叉树为例，用java写一下递归和非递归的遍历，以及广度优先遍历。</p><h2 id="定义数据结构"><a href="#定义数据结构" class="headerlink" title="定义数据结构"></a>定义数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Node&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下图的树为例进行遍历<br><img src="http://oipzgwvkn.bkt.clouddn.com/%E6%A0%91%E7%A4%BA%E4%BE%8B.png" alt=""><br><a id="more"></a></p><h2 id="递归先根遍历"><a href="#递归先根遍历" class="headerlink" title="递归先根遍历"></a>递归先根遍历</h2><p>即先打印根节点后打印子节点的值，对于最左侧的子书来说先根遍历打印顺序为：2, 5, 6, 7，对于整棵树来说先根顺序为：1, 2, 5, 6, 7, 3, 8, 9, 10, 4, 11, 12, 13<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 递归先根遍历(Node root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    System.out.print(root.value + <span class="string">", "</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != root.children)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; root.children.size(); ++i)&#123;</span><br><span class="line">            Node node = root.children.get(i);</span><br><span class="line">            递归先根遍历(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出为：1, 2, 5, 6, 7, 3, 8, 9, 10, 4, 11, 12, 13,</span></span><br></pre></td></tr></table></figure></p><h2 id="递归后根遍历"><a href="#递归后根遍历" class="headerlink" title="递归后根遍历"></a>递归后根遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 递归后根遍历(Node root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != root.children)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = root.children.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            Node node = root.children.get(i);</span><br><span class="line">            递归后根遍历(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.print(root.value + <span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出为：13, 12, 11, 4, 10, 9, 8, 3, 7, 6, 5, 2, 1,</span></span><br></pre></td></tr></table></figure><h2 id="循环深度优先遍历"><a href="#循环深度优先遍历" class="headerlink" title="循环深度优先遍历"></a>循环深度优先遍历</h2><p>通过上面的代码可以看到，递归遍历的写法比较简单，但数据量很大的时候递归会消耗过多的性能，因此循环遍历可能用的更广泛。</p><p>以深度优先为例，来思考一下：从根节点开始走，当我们走到节点2的时候，需要把节点3和节点4整个都保存到一个数据结构里，以便我们打印完节点2的子节点之后还能回来。同样，走到节点5的时候需要把节点6和节点7都保存下来。由于节点5没有子节点了，因此开始打印，输出5。因为是深度优先，所以下一步需要打印节点6和节点7，刚才做了保存所以取出来即可。思考到这，我们发现，后保存的节点（6和7）先被访问，因此采用栈来保存我们的节点。下面是代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 循环深度优先遍历(Node root) &#123;</span><br><span class="line">    System.out.print(<span class="string">"循环深度优先遍历：\t"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == root) <span class="keyword">return</span>;</span><br><span class="line">    System.out.print(root.value + <span class="string">", "</span>);</span><br><span class="line"></span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">null</span> != root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != root.children) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; root.children.size() &gt; <span class="number">1</span> &amp;&amp; i &lt; root.children.size(); ++i) &#123;</span><br><span class="line">                Node node = root.children.get(i);</span><br><span class="line">                stack.push(node);</span><br><span class="line">            &#125;</span><br><span class="line">            Node node = root.children.get(<span class="number">0</span>);</span><br><span class="line">            System.out.print(node.value + <span class="string">", "</span>);</span><br><span class="line">            root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            System.out.print(root.value + <span class="string">", "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出： 1, 2, 5, 7, 6, 4, 11, 13, 12, 3, 8, 10, 9,</span></span><br></pre></td></tr></table></figure></p><h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><p>参照深度优先的例子，来思考一下：从节点1开始打印，接着打印2，3，4，当我们打印晚2的时候需要把节点2的子节点都保存到一个数据结构里，一遍打印完4之后再回来。同样，打印完3和4的时候也需要把他们的子节点都保存下来。打印完4之后去打印节点2的子节点，也就是先保存的先被访问，因此采用队列作为保存节点的数据结构。下面是代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 循环广度优先遍历(Node root) &#123;</span><br><span class="line">    System.out.print(<span class="string">"循环广度优先遍历：\t"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == root) <span class="keyword">return</span>;</span><br><span class="line">    System.out.print(root.value + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">null</span> != root &amp;&amp; <span class="keyword">null</span> != root.children) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; root.children.size(); ++i) &#123;</span><br><span class="line">            Node node = root.children.get(i);</span><br><span class="line">            System.out.print(node.value + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != node.children)</span><br><span class="line">                queue.offer(node);</span><br><span class="line">        &#125;</span><br><span class="line">        root = queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里以多叉树为例介绍了数的遍历，同业也是适用于二叉树的。需要注意的是广度优先的时候采用队列来临时保存节点，而深度优先的时候采用栈来临时保存节点。在思考的开始无法确定应该采用何种数据结构，但在后来会总结出应该采用哪种数据结构。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习一下树的遍历，以多叉树为例，用java写一下递归和非递归的遍历，以及广度优先遍历。&lt;/p&gt;
&lt;h2 id=&quot;定义数据结构&quot;&gt;&lt;a href=&quot;#定义数据结构&quot; class=&quot;headerlink&quot; title=&quot;定义数据结构&quot;&gt;&lt;/a&gt;定义数据结构&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Node&amp;gt; children;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下图的树为例进行遍历&lt;br&gt;&lt;img src=&quot;http://oipzgwvkn.bkt.clouddn.com/%E6%A0%91%E7%A4%BA%E4%BE%8B.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://vivimee.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="http://vivimee.github.io/tags/%E6%A0%91/"/>
    
      <category term="java" scheme="http://vivimee.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript语言基础</title>
    <link href="http://vivimee.github.io/2018/01/09/jsIntroduce/"/>
    <id>http://vivimee.github.io/2018/01/09/jsIntroduce/</id>
    <published>2018-01-09T12:03:00.000Z</published>
    <updated>2018-12-02T12:16:55.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>写在前面：主要面向对JavaScript了解较少的同学，会介绍常用的JavaScript语法，也会介绍部分ES6的内容，主要为了后续介绍VUE做铺垫。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>ES6版本的JavaScript已经支持块级作用域，块级作用域内用let定义的变量在外部无法访问。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>JavaScript定义变量有三个关键字： <code>var</code>、<code>let</code>和<code>const</code>。var定义的都是全局变量。let定义的变量只在当前作用域内可访问,在外部访问会报错<code>Uncaught ReferenceError</code>。const 用来定义常量。<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> global = <span class="string">'global param'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> local = <span class="string">'local param'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(global); <span class="comment">// global param</span></span><br><span class="line"><span class="built_in">console</span>.log(local); <span class="comment">// Uncaught ReferenceError</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>JavaScript共有5种数据类型，JavaScript引擎会根据变量的赋值自动判断变量的数据类型。可用 <code>typeof</code> 对变量的数据类型进行检测，如： <code>typeof &#39;hello&#39; == &#39;string&#39;</code> 返回 <code>true</code>。</p><ol><li><code>string</code> 字符串</li><li><code>number</code> 数字</li><li><code>bool</code> 布尔值</li><li><code>null</code> 空</li><li><code>undefined</code> （已声明但未定义）。如:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> param;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> param);  <span class="comment">// undefined</span></span><br><span class="line">param = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> param);  <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>在JavaScript中定义函数有多种方法，常见的两种如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is fun1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fun2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;  <span class="comment">//箭头函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is fun2'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在编写JavaScript代码时经常会把一个函数当成另一个函数参数的参数传进去，这时候可以定义一个匿名函数，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'do something'</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.target);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>不同于传统的面向对象语言，JavaScript中没有真正的类的概念，但是有对象的概念，对象可直接定义得到，也可用函数生成。而传统的面向对象语言中的对象都是由类实例化得到的。（ES6中有了class关键字，虽然用法类似，但它和Java、C++中的class完全不同。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接定义对象</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'rick'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    friends: [<span class="string">'Bob'</span>, <span class="string">'Jack'</span>, <span class="string">'Alen'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用函数生成对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Creator</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> Creator(<span class="string">'Sam'</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//空对象</span></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JavaScript内置了一些对象，可以调用它们的api来提高编码的效率,下面介绍两个内置对向和它们的常用api。</p><ol><li><p><code>String</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'I-am-a-string'</span>;  <span class="comment">//定义一个String对象</span></span><br><span class="line"></span><br><span class="line">str.substring(<span class="number">1</span>);   <span class="comment">// -m-a-string</span></span><br><span class="line">str.substring(<span class="number">0</span>, <span class="number">3</span>);    <span class="comment">//I-a</span></span><br><span class="line">str.replace(<span class="regexp">/a/g</span>, <span class="string">'A'</span>); <span class="comment">// I-Am-A-string</span></span><br><span class="line">str.length  <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用 `` 定义字符串，可支持拼接变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'Rick'</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span>;   <span class="comment">// my name is Rick</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];   <span class="comment">//定义一个空数组</span></span><br><span class="line">arr.push(&#123;<span class="attr">name</span>: <span class="string">'rick'</span>&#125;);   <span class="comment">//添加一个对象</span></span><br><span class="line">arr.concat([&#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Alen'</span>&#125;]);    <span class="comment">//连接两个数组,会生成一个新的数组</span></span><br><span class="line">arr.splice(<span class="number">0</span>, <span class="number">1</span>);   <span class="comment">//从0号为开始，删除一个元素</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">0</span>, &#123;<span class="attr">name</span>: <span class="string">'Kate'</span>&#125;);  <span class="comment">//从1号位开始，删除0个元素，并插入&#123;name: 'Kate'&#125;这个元素</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回一个新的数组[2, 4, 6]，原数组arr不变</span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    item = item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//原数组arr变成[2, 4, 6]</span></span><br><span class="line"></span><br><span class="line">arr.filter(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> item == <span class="number">2</span>);</span><br><span class="line"><span class="comment">//返回新数组[2],过滤出数组中符合条件的项</span></span><br><span class="line"></span><br><span class="line">arr.some(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> item == <span class="number">4</span>);</span><br><span class="line"><span class="comment">//返回 true ，代表数组中是否有符合条件的项</span></span><br><span class="line"></span><br><span class="line">arr.every(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> item == <span class="number">5</span>);</span><br><span class="line"><span class="comment">//返回 false ，代表是否数组中的每一项都符合条件</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Rick'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name, age);     <span class="comment">// Rick 20</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上述操作定义了一个对象 obj，和两个变量 name, age，并把obj中同名的变量的值赋值到定义的变量中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise是一种处理异步事件的写法规范，主要用来处理网络请求，尤其是有多个并行或者串行的请求时。各种处理请求的库基本都实现了如jquery、axios等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用get方法，向 /users 接口发送请求</span></span><br><span class="line">axios.get(<span class="string">'/users'</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;    <span class="comment">//第一个函数是成功之后会执行的函数</span></span><br><span class="line"></span><br><span class="line">    &#125;, (err) =&gt; &#123;   <span class="comment">//第二函数是失败之后会执行的函数</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>在ES6中，推荐大家把代码写成模块的方式，来提升代码的复用性，模块和Java中的包的概念类似。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FROM = <span class="string">'China'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.come_from = FROM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> User;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./user'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pmm = <span class="keyword">new</span> User(<span class="string">'pmm'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pmm.getName()); <span class="comment">// pmm</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文简单介绍了常用的JavaScript语法和api，适合追求入门和速成的同学。希望深入学习JavaScript可以参考《JavaScript高级程序设计》、《你不知道的JavaScript》、《ES6标准入门》等书籍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;写在前面：主要面向对JavaScript了解较少的同学，会介绍常用的JavaScript语法，也会介绍部分ES6的内容，主要为了后续介绍VUE做铺垫。&lt;/p&gt;
&lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;ES6版本的JavaScript已经支持块级作用域，块级作用域内用let定义的变量在外部无法访问。&lt;/p&gt;
&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;p&gt;JavaScript定义变量有三个关键字： &lt;code&gt;var&lt;/code&gt;、&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;。var定义的都是全局变量。let定义的变量只在当前作用域内可访问,在外部访问会报错&lt;code&gt;Uncaught ReferenceError&lt;/code&gt;。const 用来定义常量。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://vivimee.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://vivimee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>在github上部署静态网站</title>
    <link href="http://vivimee.github.io/2018/01/07/gitpage-setup/"/>
    <id>http://vivimee.github.io/2018/01/07/gitpage-setup/</id>
    <published>2018-01-07T04:50:53.000Z</published>
    <updated>2018-12-02T12:16:48.935Z</updated>
    
    <content type="html"><![CDATA[<p>在gitpage上部署静态文件非常方便，而且免费，缺点是有1GB空间大小的限制，编辑发布文章不够可视化。下面简单介绍一下部署过程。</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><blockquote><ul><li>首先要在github上新建一个仓库，命名为 <code>username.github.io</code> 其中username为登录github的用户名。其他选项默认即可。</li><li>创建完成后把代码克隆到本地，在根目录下创建 <code>index.html</code>。编辑内容如下：<a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>之后提交push到远程master分支之后即可访问 <code>https://username.github.io</code>查看效果。</li></ul></blockquote><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>可以将多个域名指向到部署的gitpage上，需要两步即可：</p><blockquote><ul><li>在<code>source</code>目录下新建一个CNAME文件，无后缀名，内容为域名的地址，如 <code>blog.pmm.com</code>。</li><li>添加域名解析规则，将 <code>blog.pmm.com</code> 指向到 <code>username.github.io</code>。<br>访问 <code>blog.pmm.com</code>查看效果</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在gitpage上部署静态文件非常方便，而且免费，缺点是有1GB空间大小的限制，编辑发布文章不够可视化。下面简单介绍一下部署过程。&lt;/p&gt;
&lt;h2 id=&quot;新建仓库&quot;&gt;&lt;a href=&quot;#新建仓库&quot; class=&quot;headerlink&quot; title=&quot;新建仓库&quot;&gt;&lt;/a&gt;新建仓库&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先要在github上新建一个仓库，命名为 &lt;code&gt;username.github.io&lt;/code&gt; 其中username为登录github的用户名。其他选项默认即可。&lt;/li&gt;
&lt;li&gt;创建完成后把代码克隆到本地，在根目录下创建 &lt;code&gt;index.html&lt;/code&gt;。编辑内容如下：
    
    </summary>
    
      <category term="技术" scheme="http://vivimee.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="建站" scheme="http://vivimee.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
