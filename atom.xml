<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vivimee</title>
  
  <subtitle>Hello World!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vivimee.github.io/"/>
  <updated>2019-01-13T06:55:16.554Z</updated>
  <id>https://vivimee.github.io/</id>
  
  <author>
    <name>Vivimee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webAPI-file</title>
    <link href="https://vivimee.github.io/2019/01/13/webAPI-file/"/>
    <id>https://vivimee.github.io/2019/01/13/webAPI-file/</id>
    <published>2019-01-13T06:48:07.000Z</published>
    <updated>2019-01-13T06:55:16.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h2><p>文件选择有两种方式：通过input标签获取和通过拖拽文件到指定区域获取。  </p><h3 id="通过input标签获取文件"><a href="#通过input标签获取文件" class="headerlink" title="通过input标签获取文件"></a>通过input标签获取文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"fileInput"</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFiles</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.files);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#fileInput'</span>).addEventListener(<span class="string">'change'</span>, handleFiles);</span><br></pre></td></tr></table></figure><a id="more"></a><p>一个 <code>File</code> 对象主要包含 <code>name</code> <code>size</code> <code>type</code><br>这种方式下 <code>input</code> 标签的样式不容易定义成我们想要的样子，所以一般都会把它隐藏掉，而利用 <code>label</code> 标签的 <code>for</code> 属性来触发 <code>input</code> 标签的选择文件行为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">for</span>=<span class="string">"hiddenFileInput"</span>&gt;</span>选择文件（隐藏input标签）<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"hiddenFileInput"</span> <span class="attr">multiple</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#hiddenFileInput'</span>).addEventListener(<span class="string">'change'</span>, handleFiles);</span><br></pre></td></tr></table></figure><p>对于 <code>label</code> 标签，就可以自由的用css重新定义样式了。除了用 <code>label</code> 标签触发之外，还可以直接调用 <code>input</code> 节点的 <code>click</code> 方法来触发选择文件弹窗：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#fileInput'</span>).click();</span><br></pre></td></tr></table></figure></p><h3 id="通过拖拽文件到指定区域获取"><a href="#通过拖拽文件到指定区域获取" class="headerlink" title="通过拖拽文件到指定区域获取"></a>通过拖拽文件到指定区域获取</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drop-box"</span> <span class="attr">id</span>=<span class="string">"dropBox"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>把文件拖进来<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noloop</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDrop</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    noloop(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> files = e.dataTransfer.files;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.length; ++i) &#123;</span><br><span class="line">        previewFile(files[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dropBox = <span class="built_in">document</span>.querySelector(<span class="string">'#dropBox'</span>);</span><br><span class="line">dropBox.addEventListener(<span class="string">'dragenter'</span>, noloop);</span><br><span class="line">dropBox.addEventListener(<span class="string">'dragover'</span>, noloop);</span><br><span class="line">dropBox.addEventListener(<span class="string">'drop'</span>, onDrop);</span><br></pre></td></tr></table></figure><p>在这里，要对 <code>dragenter</code>、<code>dragover</code>、<code>drop</code>事件做取消默认行为，取消冒泡的处理，否则可能触发浏览器直接打开拖拽的文件的行为。  </p><h2 id="预览文件"><a href="#预览文件" class="headerlink" title="预览文件"></a>预览文件</h2><p>选择文件之后很可能会有预览的需求，最多的场景是预览图片，这里介绍一下预览图片、pdf文件、视频文件的方法，<a href="https://www.microsoft.com/en-us/microsoft-365/blog/2013/04/10/office-web-viewer-view-office-documents-in-a-browser" target="_blank" rel="noopener">微软office文档预览点这里</a>。<br>预览这几种文件分别可以用 <code>img</code> <code>iframe</code> <code>video</code> 几个标签，给他们设置上要预览的文件的地址就可以展示在网页上了，于是问题转化成了如何获取本地文件的链接。</p><h3 id="先来了解一下-window-URL"><a href="#先来了解一下-window-URL" class="headerlink" title="先来了解一下 window.URL"></a>先来了解一下 window.URL</h3><p><code>window.URL</code> 是一个函数，主要功能是接收至少两个地址参数，返回合并后的新地址对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> URL(<span class="string">"../cats/"</span>, <span class="string">"https://www.example.com/dogs/"</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    hash: ""</span></span><br><span class="line"><span class="comment">    host: "www.example.com",</span></span><br><span class="line"><span class="comment">    hostname: "www.example.com",</span></span><br><span class="line"><span class="comment">    href: "https://www.example.com/cats/",</span></span><br><span class="line"><span class="comment">    origin: "https://www.example.com",</span></span><br><span class="line"><span class="comment">    password: "",</span></span><br><span class="line"><span class="comment">    pathname: "/cats/",</span></span><br><span class="line"><span class="comment">    port: "",</span></span><br><span class="line"><span class="comment">    protocol: "https:",</span></span><br><span class="line"><span class="comment">    search: "",</span></span><br><span class="line"><span class="comment">    searchParams: URLSearchParams &#123;&#125;,</span></span><br><span class="line"><span class="comment">    username: ""</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>第一个参数可以是相对地址，后面的参数必须是带协议头的地址，然后前面的参数依次覆盖后面参数里的某些部分，有点类似 <code>Object.assign</code>，以上是这个函数的功能（感觉并没有什么卵用）。除此之外，window.URL还有两个静态方法：<code>URL.createObjectURL</code>、<code>URL.revokeObjectURL</code> 这两个方法就比较有用了，前者可以生成 File 对象的 blob url，这个url设置进标签的src属性，用来展示文件。对于生成的url，需要用 URL.revokeObjectURL(url) 来释放掉，以获取更好的性能，否则页面被关闭的时候，会被自动释放掉。示例代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">previewImg</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.URL.createObjectURL(file);</span><br><span class="line">    <span class="comment">// blob:null/ba752225-a3fd-4865-881d-cacc6e813bd1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    img.height = <span class="number">100</span>;</span><br><span class="line">    img.src = url;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#dropBox'</span>).appendChild(img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pdf文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">previewPDF</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.URL.createObjectURL(file);</span><br><span class="line">    <span class="keyword">var</span> frame = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    frame.width = <span class="number">200</span>;</span><br><span class="line">    frame.height = <span class="number">100</span>;</span><br><span class="line">    frame.src = url;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#dropBox'</span>).appendChild(frame);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视频文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">previewVideo</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.URL.createObjectURL(file);</span><br><span class="line">    <span class="keyword">var</span> video = <span class="built_in">document</span>.createElement(<span class="string">'video'</span>);</span><br><span class="line">    video.width = <span class="number">200</span>;</span><br><span class="line">    video.height = <span class="number">100</span>;</span><br><span class="line">    video.src = url;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#dropBox'</span>).appendChild(video);</span><br><span class="line">    video.play();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>这里用 FormData 简单展示一下上传文件的方法，对大文件分片上传、http请求头的设置等内容还不甚了解，在此不作展开了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">for</span>=<span class="string">"uploadFileInput"</span>&gt;</span>选择文件并上传<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"uploadFileInput"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleUpload</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">'formdataKey'</span>, file, file.name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'post'</span>, <span class="string">'http://localhost:7000/upload'</span>);</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send(formData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件创建和下载"><a href="#文件创建和下载" class="headerlink" title="文件创建和下载"></a>文件创建和下载</h2><p>webAPI里的 Blob 能够帮助我们在前端直接创建文件，在继续之前强烈建议阅读了解一下<a href="https://www.zhangxinxu.com/wordpress/2013/10/understand-domstring-document-formdata-blob-file-arraybuffer/" target="_blank" rel="noopener">理解DOMString、Document、FormData、Blob、File、ArrayBuffer数据类型</a>。  </p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> aBlob = <span class="keyword">new</span> Blob( array, options );</span><br></pre></td></tr></table></figure><ul><li>array 是一个由ArrayBuffer, ArrayBufferView, Blob, DOMString 等对象构成的 Array ，或者其他类似对象的混合体，它将会被放进 Blob。DOMStrings会被编码为UTF-8。  </li><li>options 是一个可选的BlobPropertyBag字典，它可能会指定如下两个属性：<br>type，默认值为 “”，它代表了将会被放入到blob中的数组内容的MIME类型。<br>endings，默认值为”transparent”，用于指定包含行结束符\n的字符串如何被写入。 它是以下两个值中的一个： “native”，代表行结束符会被更改为适合宿主操作系统文件系统的换行符，或者 “transparent”，代表会保持blob中保存的结束符不变    </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domString = <span class="string">`&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;document&lt;/title&gt;    </span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;Hello world&lt;/h3&gt;    </span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;`</span>;</span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([domString], &#123; <span class="attr">type</span>: <span class="string">'text/html'</span> &#125;);</span><br><span class="line"><span class="comment">// 这样就创建了一份html文件</span></span><br><span class="line"><span class="comment">// 下面获取它的blob url，并展示：</span></span><br><span class="line"><span class="keyword">var</span> blobUrl = URL.createObjectURL(blob);</span><br><span class="line"><span class="keyword">var</span> f = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">f.src = blobUrl;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(f);</span><br></pre></td></tr></table></figure><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>下载文件可以利用<code>a</code>标签的 <code>download</code> 属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">download</span>=<span class="string">"a.html"</span> <span class="attr">href</span>=<span class="string">"blob:..."</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是，如果是网络地址，则需要是同域名下的文件才能这样下载。<br>对于通过 <code>ajax</code> 请求获取到的二进制数据也可以通过上面的方式生成blob对象，并用适当的标签展示，比如图片、视频资源。另一个应用是前端直接导出表格里的数据到本地：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">id</span>=<span class="string">"createAndDownloadCSVBtn"</span>&gt;</span>创建并导出csv文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAndDownloadCSV</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> header = [<span class="string">'id'</span>, <span class="string">'姓名'</span>, <span class="string">'爱好'</span>];</span><br><span class="line">    <span class="keyword">var</span> data = [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">favirote</span>: <span class="string">'钓鱼'</span> &#125;,</span><br><span class="line">        &#123;  <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'李四'</span>, <span class="attr">favirote</span>: <span class="string">'旅行'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'王五'</span>, <span class="attr">favirote</span>: <span class="string">'听音乐'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">var</span> csvStr = <span class="string">`<span class="subst">$&#123;header.join(<span class="string">','</span>)&#125;</span>\n<span class="subst">$&#123;data.map((line) =&gt; line.id + <span class="string">','</span> + line.name + <span class="string">','</span> + line.favirote).join(<span class="string">'\n'</span>)&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([csvStr], &#123; <span class="attr">type</span>: <span class="string">'text/csv'</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> blobUrl = URL.createObjectURL(blob);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    a.download = <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleDateString()&#125;</span>-测试.csv`</span>;</span><br><span class="line">    a.href = blobUrl;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">    a.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#createAndDownloadCSVBtn'</span>).addEventListener(<span class="string">'click'</span>, createAndDownloadCSV);</span><br></pre></td></tr></table></figure><p>示例：<a href="https://vivimee.github.io/webAPI-file/">https://vivimee.github.io/webAPI-file/</a><br>代码：<a href="https://github.com/vivimee/webAPI-file" target="_blank" rel="noopener">https://github.com/vivimee/webAPI-file</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.zhangxinxu.com/wordpress/2013/10/understand-domstring-document-formdata-blob-file-arraybuffer/" target="_blank" rel="noopener">理解DOMString、Document、FormData、Blob、File、ArrayBuffer数据类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/URL" target="_blank" rel="noopener">MDN-URL()</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件选择&quot;&gt;&lt;a href=&quot;#文件选择&quot; class=&quot;headerlink&quot; title=&quot;文件选择&quot;&gt;&lt;/a&gt;文件选择&lt;/h2&gt;&lt;p&gt;文件选择有两种方式：通过input标签获取和通过拖拽文件到指定区域获取。  &lt;/p&gt;
&lt;h3 id=&quot;通过input标签获取文件&quot;&gt;&lt;a href=&quot;#通过input标签获取文件&quot; class=&quot;headerlink&quot; title=&quot;通过input标签获取文件&quot;&gt;&lt;/a&gt;通过input标签获取文件&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fileInput&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;multiple&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleFiles&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.target.files);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#fileInput&#39;&lt;/span&gt;).addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;change&#39;&lt;/span&gt;, handleFiles);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="https://vivimee.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML5" scheme="https://vivimee.github.io/tags/HTML5/"/>
    
      <category term="file" scheme="https://vivimee.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>websocket</title>
    <link href="https://vivimee.github.io/2018/12/24/websocket/"/>
    <id>https://vivimee.github.io/2018/12/24/websocket/</id>
    <published>2018-12-24T14:23:45.000Z</published>
    <updated>2018-12-24T15:37:49.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="websocket简介和实现一个简单的聊天室"><a href="#websocket简介和实现一个简单的聊天室" class="headerlink" title="websocket简介和实现一个简单的聊天室"></a>websocket简介和实现一个简单的聊天室</h1><h2 id="websocket简介"><a href="#websocket简介" class="headerlink" title="websocket简介"></a>websocket简介</h2><p>websocket是一种基于TCP的协议，最重要的功能是服务端能够向客户端主动推送消息，最佳的应用场景就是网络聊天室。使用websocket能够方便的创建一个网页上的客户端，并和服务端进行通讯。下面介绍一下客户端的实现和nodejs版本的服务端实现。<br><a id="more"></a></p><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://192.168.0.101:8181'</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'opened'</span>, ev);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'message'</span>, ev);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'close'</span>, ev);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onerror = <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'error'</span>, err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就在浏览器里创建了一个websocket客户端，<code>new WebSocket()</code>参数是websocket服务器的信息：协议+ip（或者域名）+端口号。协议就是 <code>ws:</code> 代表websocket协议。<br>主要有四个监听事件：<code>open</code>、<code>message</code>、<code>close</code>、<code>error</code>，分别对应连接创建成功、收到消息、连接已关闭、发生异常。<br>也可以用<code>addEventListener</code>方法为一个事件添加多个监听函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> messageHandler1 = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> messageHandler2 = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">ws.addEventListener(<span class="string">'message'</span>, messageHandler1);</span><br><span class="line">ws.addEventListener(<span class="string">'message'</span>, messageHandler2);</span><br></pre></td></tr></table></figure></p><p>不过个人建议还是写一个 <code>onmessage</code> 回调函数，在这个回调函数里去依次调用要执行的函数，这样每收到一条消息都执行了哪些操作会更加一目了然，把监听事件都集中到一起，也便于维护。 </p><h3 id="websocket状态"><a href="#websocket状态" class="headerlink" title="websocket状态"></a>websocket状态</h3><p>websocket状态：<code>ws.readyState</code> 是一个websocket状态的枚举值，代表当前状态。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WebSocket.CONNECTING  <span class="comment">// 正在连接</span></span><br><span class="line">WebSocket.OPEN        <span class="comment">// 已连接</span></span><br><span class="line">WebSocket.CLOSING     <span class="comment">// 正在断开连接</span></span><br><span class="line">WebSocket.CLOSED      <span class="comment">// 连接已断开</span></span><br></pre></td></tr></table></figure></p><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送字符串</span></span><br><span class="line">ws.send(<span class="string">'Hi~'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送文件</span></span><br><span class="line"><span class="keyword">const</span> file = files[<span class="number">0</span>];  <span class="comment">// 用户选择的文件</span></span><br><span class="line">ws.send(file);</span><br></pre></td></tr></table></figure><h2 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h2><p>服务端实现可以用各种语言，如Java、C++、.NET等，下面以NodeJS的 <code>ws</code> 模块为例简单介绍一下服务端的实现。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">const</span> WebSocketServer = WebSocket.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">8181</span> &#125;);</span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ws, req</span>) </span>&#123;</span><br><span class="line">    ws.send(<span class="string">'You are connected!'</span>);</span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message);</span><br><span class="line">        ws.send(<span class="string">`Server Receive message: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>这样就启动了一个websocket服务器，它接受客户端的连接，并回复客户端的消息。<br>如果想给每一个客户端发送消息，可以遍历已连接的客户端，并给他们推送消息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">        client.send(<span class="string">'Server message: Hello~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="简易的网络聊天室"><a href="#简易的网络聊天室" class="headerlink" title="简易的网络聊天室"></a>简易的网络聊天室</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">const</span> WebSocketServer = WebSocket.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocketServer(&#123; <span class="attr">port</span>: <span class="number">8181</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ws, req</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ip = req.connection.remoteAddress.replace(<span class="string">'::ffff:'</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'client connected'</span>, ip);</span><br><span class="line">    ws.send(<span class="string">`你（<span class="subst">$&#123;ip&#125;</span>）已加入群聊，快和大家打个招呼吧~`</span>);</span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">                <span class="comment">// const clientIp = client._socket._peername.address.replace('::ffff:', '');</span></span><br><span class="line">                client.send(<span class="string">`<span class="subst">$&#123;ip&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://192.168.0.101:8181'</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'opened'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> messages = <span class="keyword">this</span>.state.messages.concat([]);</span><br><span class="line">    messages.push(&#123; <span class="attr">data</span>: ev.data, <span class="attr">direction</span>: IN &#125;);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; messages &#125;);</span><br><span class="line">&#125;</span><br><span class="line">ws.onclose = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'closed'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>完整示例：<a href="https://github.com/vivimee/learn-websocket.git" target="_blank" rel="noopener">https://github.com/vivimee/learn-websocket.git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;websocket简介和实现一个简单的聊天室&quot;&gt;&lt;a href=&quot;#websocket简介和实现一个简单的聊天室&quot; class=&quot;headerlink&quot; title=&quot;websocket简介和实现一个简单的聊天室&quot;&gt;&lt;/a&gt;websocket简介和实现一个简单的聊天室&lt;/h1&gt;&lt;h2 id=&quot;websocket简介&quot;&gt;&lt;a href=&quot;#websocket简介&quot; class=&quot;headerlink&quot; title=&quot;websocket简介&quot;&gt;&lt;/a&gt;websocket简介&lt;/h2&gt;&lt;p&gt;websocket是一种基于TCP的协议，最重要的功能是服务端能够向客户端主动推送消息，最佳的应用场景就是网络聊天室。使用websocket能够方便的创建一个网页上的客户端，并和服务端进行通讯。下面介绍一下客户端的实现和nodejs版本的服务端实现。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://vivimee.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML5" scheme="https://vivimee.github.io/tags/HTML5/"/>
    
      <category term="webSocket" scheme="https://vivimee.github.io/tags/webSocket/"/>
    
  </entry>
  
  <entry>
    <title>canvas-坐标系、圆角矩形、纹理、剪裁图片</title>
    <link href="https://vivimee.github.io/2018/12/08/canvas-1/"/>
    <id>https://vivimee.github.io/2018/12/08/canvas-1/</id>
    <published>2018-12-08T10:11:36.000Z</published>
    <updated>2018-12-09T01:20:18.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p><code>画布大小</code>：由canvas标签上设置的width，height决定，默认是 300 x 150，这也是画布坐标系x轴和y轴的最大值，超过这两个值，则意味着超过了画布大小，超过的部分自然不会生效。<br><code>canvas标签大小</code>：由css样式的width，height决定，默认是画布的大小。<br>特殊情况： 画布大小和canvas标签大小不相等的时候，画布会被缩放到跟标签大小一样。<strong>缩放不是等比例的，并且缩放完成后，画布的坐标系不变</strong>。因此最好把canvas标签的css大小和canvas画布大小设置为一致。<br><a id="more"></a><br>默认画布（300 * 150）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas1"</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> '<span class="attr">100px</span>', <span class="attr">height:</span> '<span class="attr">100px</span>' &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">150</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678ca8b12ed52ac?w=730&amp;h=304&amp;f=png&amp;s=20047" alt=""><br>可以看到从（0，0）到（300， 150）这条线是从左上角到右下角的，可见画布被不等比例缩放到跟标签一样大，同时坐标系还是画布的大小：300 * 150。<br>当画布较小，而canvas标签比较大的时候，图形就会被放大，变形变模糊:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas2"</span> <span class="attr">width</span>=<span class="string">&#123;10&#125;</span> <span class="attr">height</span>=<span class="string">&#123;20&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> '<span class="attr">100px</span>', <span class="attr">height:</span> '<span class="attr">100px</span>' &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cad88f37771b?w=656&amp;h=284&amp;f=png&amp;s=27131" alt=""></p><p>在2倍屏和3倍屏上，可把画布大小设置成标签大小的2倍和3倍，这样可以实现1px细线的效果，同时使线条更细腻<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas3"</span> <span class="attr">width</span>=<span class="string">&#123;200&#125;</span> <span class="attr">height</span>=<span class="string">&#123;200&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> '<span class="attr">100px</span>', <span class="attr">height:</span> '<span class="attr">100px</span>' &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678caf2cc0e2b59?w=708&amp;h=300&amp;f=png&amp;s=18448" alt=""></p><h2 id="圆角矩形"><a href="#圆角矩形" class="headerlink" title="圆角矩形"></a>圆角矩形</h2><p>要实现圆角矩形，先来了解一下画圆的api。</p><h3 id="arc-x-y-r-sAngle-eAngle-counterclockwise"><a href="#arc-x-y-r-sAngle-eAngle-counterclockwise" class="headerlink" title="arc(x, y, r, sAngle, eAngle, counterclockwise)"></a>arc(x, y, r, sAngle, eAngle, counterclockwise)</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>圆的中心的 x 坐标。</td></tr><tr><td>y</td><td>圆的中心的 y 坐标。</td></tr><tr><td>r</td><td>圆的半径。</td></tr><tr><td>sAngle</td><td>起始角，以弧度计。（弧的圆形的三点钟位置是 0 度）。</td></tr><tr><td>eAngle</td><td>结束角，以弧度计。</td></tr><tr><td>counterclockwise</td><td>可选。规定应该逆时针还是顺时针绘图，默认值false。false = 顺时针，true = 逆时针。</td></tr></tbody></table><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cb6968997a6b?w=204&amp;h=210&amp;f=gif&amp;s=1857" alt=""><br>画圆<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas11"</span> <span class="attr">width</span>=<span class="string">&#123;100&#125;</span> <span class="attr">height</span>=<span class="string">&#123;100&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">50</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cbf146fbd0b1?w=260&amp;h=296&amp;f=png&amp;s=10713" alt=""><br>圆弧<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas10"</span> <span class="attr">width</span>=<span class="string">&#123;100&#125;</span> <span class="attr">height</span>=<span class="string">&#123;100&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="built_in">Math</span>.PI, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI);    <span class="comment">// 左上角</span></span><br><span class="line">ctx.arc(<span class="number">80</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI, <span class="number">2</span> * <span class="built_in">Math</span>.PI);    <span class="comment">// 右上角</span></span><br><span class="line">ctx.arc(<span class="number">20</span>, <span class="number">80</span>, <span class="number">20</span>, <span class="number">0.5</span> * <span class="built_in">Math</span>.PI, <span class="built_in">Math</span>.PI);    <span class="comment">// 左下角</span></span><br><span class="line">ctx.arc(<span class="number">80</span>, <span class="number">80</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">0.5</span> * <span class="built_in">Math</span>.PI);    <span class="comment">// 右下角</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cc1408f926ca?w=262&amp;h=292&amp;f=png&amp;s=12469" alt=""><br>有了这四段圆弧，再利用<code>closePath</code>方法会连接路径的特点，即可画出圆角矩形了。来封装一个画圆角矩形的函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> drawRoundedRect = <span class="function">(<span class="params">ctx, x, y, width, height, radius, type</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.moveTo(x, y + radius);</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(x + radius, y + radius, radius, <span class="built_in">Math</span>.PI, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">  ctx.arc(x + width - radius, y + radius, radius, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">  ctx.arc(x + width - radius, y + height - radius, radius, <span class="number">0</span>, <span class="number">0.5</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">  ctx.arc(x + radius, y + height - radius, radius, <span class="number">0.5</span> * <span class="built_in">Math</span>.PI, <span class="built_in">Math</span>.PI);</span><br><span class="line">  ctx.closePath();</span><br><span class="line">  <span class="keyword">const</span> method = type || <span class="string">'stroke'</span>;  <span class="comment">// 默认描边，传入fill即可填充矩形</span></span><br><span class="line">  ctx[method]();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">drawRoundedRect(ctx, <span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cc41443a6e23?w=226&amp;h=284&amp;f=png&amp;s=14065" alt=""></p><h3 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h3><h4 id="createPattern-img-“repeat-repeat-x-repeat-y-no-repeat”"><a href="#createPattern-img-“repeat-repeat-x-repeat-y-no-repeat”" class="headerlink" title="createPattern(img, “repeat|repeat-x|repeat-y|no-repeat”)"></a>createPattern(img, “repeat|repeat-x|repeat-y|no-repeat”)</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>img</td><td>规定要使用的图片、画布或视频元素。</td></tr><tr><td>repeat</td><td>默认。该模式在水平和垂直方向重复。</td></tr><tr><td>repeat-x</td><td>该模式只在水平方向重复。</td></tr><tr><td>repeat-y</td><td>该模式只在垂直方向重复。</td></tr><tr><td>no-repeat</td><td>该模式只显示一次（不重复）。</td></tr></tbody></table><p>原图</p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678ccced19b54fd?w=320&amp;h=240&amp;f=jpeg&amp;s=15095" alt=""><br>尝试如下代码： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas13"</span> <span class="attr">width</span>=<span class="string">&#123;400&#125;</span> <span class="attr">height</span>=<span class="string">&#123;300&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'catImg'</span>, img.width, img.height);</span><br><span class="line"><span class="keyword">const</span> pat = ctx.createPattern(img, <span class="string">'no-repeat'</span>);</span><br><span class="line">ctx.fillStyle = pat;</span><br><span class="line">drawRoundedRect(ctx, <span class="number">130</span>, <span class="number">30</span>, <span class="number">250</span>, <span class="number">260</span>, <span class="number">10</span>, <span class="string">'fill'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = catImgSrc;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678ccd8cf380bac?w=822&amp;h=670&amp;f=png&amp;s=296556" alt=""><br>从结果里发现两个问题：  </p><ol><li>图片的左上角和矩形的左上角不在同一点上；</li><li>矩形貌似少了右边和下边的部分。    </li></ol><p>接下来尝试修改代码里的 <code>no-repeat</code> 为 <code>repeat</code>:</p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cd02ff14ca2a?w=842&amp;h=692&amp;f=png&amp;s=446408" alt=""><br>结合这两个结果和上面的问题，总结出纹理的如下特点：</p><ol><li>纹理是从画布的（0，0）点开始无缩放渲染的；</li><li>设置<code>no-repeat</code>会导致那些没有纹理覆盖的区域是空白。</li></ol><p>这意味着我们不能自由的使用纹理来实现圆角图片的效果。<br>接下来了解一下canvas提供的专门用于图片剪裁的api。</p><h2 id="剪裁"><a href="#剪裁" class="headerlink" title="剪裁"></a>剪裁</h2><p>剪裁分为画布的剪裁<code>clip</code>和图片的剪裁<code>drawImage</code>，先来介绍一下图片的剪裁。</p><h3 id="drawImage-img-sx-sy-swidth-sheight-x-y-width-height"><a href="#drawImage-img-sx-sy-swidth-sheight-x-y-width-height" class="headerlink" title="drawImage(img, sx, sy, swidth, sheight, x, y, width, height)"></a>drawImage(img, sx, sy, swidth, sheight, x, y, width, height)</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>img</td><td>规定要使用的图像、画布或视频。</td></tr><tr><td>sx</td><td>可选。开始剪切的 x 坐标位置。</td></tr><tr><td>sy</td><td>可选。开始剪切的 y 坐标位置。</td></tr><tr><td>swidth</td><td>可选。被剪切图像的宽度。</td></tr><tr><td>sheight</td><td>可选。被剪切图像的高度。</td></tr><tr><td>x</td><td>在画布上放置图像的 x 坐标位置。</td></tr><tr><td>y</td><td>在画布上放置图像的 y 坐标位置。</td></tr><tr><td>width</td><td>可选。要使用的图像的宽度。（伸展或缩小图像）</td></tr><tr><td>height</td><td>可选。要使用的图像的高度。（伸展或缩小图像）</td></tr></tbody></table><p>drawImage可接受3、5、9个参数。<br>接下来介绍一下分别传这几个参数的表现，先看原图：<br>大小：1080 * 720<br><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cee75cc7c6e9?w=414&amp;h=276&amp;f=png&amp;s=180090" alt=""></p><h4 id="三个参数"><a href="#三个参数" class="headerlink" title="三个参数"></a>三个参数</h4><p>会被当做：img、x、y。图片不会缩放和剪裁，直接渲染到画布上，超过画布的区域被隐藏，也可理解成超过画布的区域被剪掉了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'img:'</span>, img.width, img.height);</span><br><span class="line">  ctx.drawImage(img, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = imgSrc;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cf55c7a10005?w=426&amp;h=492&amp;f=png&amp;s=85899" alt=""></p><h4 id="九个参数"><a href="#九个参数" class="headerlink" title="九个参数"></a>九个参数</h4><p>按照上面表格的定义进行剪裁和缩放。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = imgSrc;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cf62e387d6a0?w=484&amp;h=498&amp;f=png&amp;s=108412" alt=""></p><h4 id="五个参数"><a href="#五个参数" class="headerlink" title="五个参数"></a>五个参数</h4><p>img、x、y、width、height，此时图片不会被剪裁，而是直接缩放到目标宽高，且是不等比例的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = imgSrc;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cf6d7e577878?w=438&amp;h=496&amp;f=png&amp;s=140836" alt=""><br>接下来传入9个参数，剪裁图片的宽高等于图片的宽高，来验证和5个参数是一样的效果：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1080</span>, <span class="number">720</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = imgSrc;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678cf7a13a5c71f?w=474&amp;h=494&amp;f=png&amp;s=147021" alt=""><br>另外，从原图上剪裁的时候，不要超过图片的宽高，否则会出现空白。<br>drawImage这个api能实现把图片剪裁成直角矩形，却不能实现圆角的效果。而上面的纹理方法，能实现圆角图片，但效果不是十分理想，毕竟它是用来做纹理的，而不是图片剪裁。接下来再了解一个api: <code>clip</code>，通过它配合drawImage，能实现把图片剪裁成圆角矩形、圆形、甚至任意形状。</p><h3 id="clip"><a href="#clip" class="headerlink" title="clip()"></a>clip()</h3><p><code>clip()</code>方法就是把画布中的某个区域临时剪切出来，剪切之前要定义这个区域的路径。剪切以后，所有的绘制只有落在这个区域里才会生效，在这个区域外的不会生效。之所以说“临时”，是因为如果在剪切之前调用了<code>save()</code>方法，则画布状态会被保存下来，之后调用<code>restore()</code>方法即可恢复之前的状态，即 clip 的那个区域的限制不再继续生效，而之前落在区域外的绘制也不会因为 restore 而被绘制出来。<br>尝试如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas15"</span> <span class="attr">width</span>=<span class="string">&#123;150&#125;</span> <span class="attr">height</span>=<span class="string">&#123;150&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个区域</span></span><br><span class="line">drawRoundedRect(ctx, <span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.clip();</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = imgSrc;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678d1766f6348e2?w=326&amp;h=318&amp;f=png&amp;s=50122" alt=""><br>看到这个效果很兴奋，接下来只要把图片的目标区域先从画布上剪切下来，再调用drawImage去绘制图片，则图片就会变成想要的形状。至于原始图片，则可以通过<code>drawImage</code>先剪裁一个想要的区域，再进行绘制。<br>从原图上剪裁出一部分，再绘制成两个圆角的图片：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas16"</span> <span class="attr">width</span>=<span class="string">&#123;300&#125;</span> <span class="attr">height</span>=<span class="string">&#123;200&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.save();</span><br><span class="line"></span><br><span class="line">  ctx.strokeStyle = <span class="string">'#fff'</span>;</span><br><span class="line">  drawRoundedRect(ctx, <span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">  ctx.clip();</span><br><span class="line">  ctx.drawImage(img, <span class="number">500</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">  ctx.restore();</span><br><span class="line"></span><br><span class="line">  ctx.strokeStyle = <span class="string">'#fff'</span>;</span><br><span class="line">  drawRoundedRect(ctx, <span class="number">150</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">5</span>);</span><br><span class="line">  ctx.clip();</span><br><span class="line">  ctx.drawImage(img, <span class="number">500</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">150</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = imgSrc;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678d2758f73be4b?w=648&amp;h=292&amp;f=png&amp;s=77523" alt=""><br>接下来封装一个能实现圆角功能的<code>drawImage</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> drawRoundedImage = <span class="function">(<span class="params">ctx, radius, img, sx, sy, swidth, sheight, x, y, width, height</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.moveTo(x, y + radius);</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  <span class="keyword">if</span> (width === height &amp;&amp; radius &gt;= width / <span class="number">2</span>) &#123;</span><br><span class="line">    ctx.arc(x + radius, y + radius, radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.arc(x + radius, y + radius, radius, <span class="built_in">Math</span>.PI, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.arc(x + width - radius, y + radius, radius, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.arc(x + width - radius, y + height - radius, radius, <span class="number">0</span>, <span class="number">0.5</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.arc(x + radius, y + height - radius, radius, <span class="number">0.5</span> * <span class="built_in">Math</span>.PI, <span class="built_in">Math</span>.PI);</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.closePath();</span><br><span class="line">  ctx.clip();</span><br><span class="line">  ctx.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  drawRoundedImage(ctx, <span class="number">10</span>, img, (<span class="number">1080</span> - <span class="number">720</span>) / <span class="number">2</span>, <span class="number">0</span>, <span class="number">720</span>, <span class="number">720</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">180</span>, <span class="number">180</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = imgSrc;</span><br></pre></td></tr></table></figure></p><p>效果：</p><p><img src="https://user-gold-cdn.xitu.io/2018/12/8/1678d305d5c40fc0?w=444&amp;h=430&amp;f=png&amp;s=180493" alt=""><br>如果把上面的绘制路径部分提出来当成参数传入，则可实现用户自定义图形然后将图片剪裁成该形状的功能：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> drawImageToWhatYouWant = <span class="function">(<span class="params">ctx, getPath, img, sx, sy, swidth, sheight, x, y, width, height</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.save();</span><br><span class="line">  getPath(ctx);  <span class="comment">// 自定义图形的路径</span></span><br><span class="line">  ctx.clip();</span><br><span class="line">  ctx.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><h3 id="toDataURL-type-encoderOptions"><a href="#toDataURL-type-encoderOptions" class="headerlink" title="toDataURL([type, encoderOptions])"></a>toDataURL([type, encoderOptions])</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>图片格式，默认为image/png</td></tr><tr><td>encoderOptions</td><td>在指定图片格式为 image/jpeg 或 image/webp的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用：</span><br><span class="line"><span class="keyword">const</span> imgStr = canvas.toDataURL(<span class="string">"image/jpeg"</span>, <span class="number">1.0</span>);</span><br></pre></td></tr></table></figure><p><strong>注意：当画布中包含图片时，此图片必须是允许跨域的，否则调用toDataURL 会报错！</strong></p><h5 id="查看完整代码示例：https-github-com-vivimee-learn-canvas"><a href="#查看完整代码示例：https-github-com-vivimee-learn-canvas" class="headerlink" title="查看完整代码示例：https://github.com/vivimee/learn-canvas"></a>查看完整代码示例：<a href="https://github.com/vivimee/learn-canvas" target="_blank" rel="noopener">https://github.com/vivimee/learn-canvas</a></h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;坐标系&quot;&gt;&lt;a href=&quot;#坐标系&quot; class=&quot;headerlink&quot; title=&quot;坐标系&quot;&gt;&lt;/a&gt;坐标系&lt;/h2&gt;&lt;p&gt;&lt;code&gt;画布大小&lt;/code&gt;：由canvas标签上设置的width，height决定，默认是 300 x 150，这也是画布坐标系x轴和y轴的最大值，超过这两个值，则意味着超过了画布大小，超过的部分自然不会生效。&lt;br&gt;&lt;code&gt;canvas标签大小&lt;/code&gt;：由css样式的width，height决定，默认是画布的大小。&lt;br&gt;特殊情况： 画布大小和canvas标签大小不相等的时候，画布会被缩放到跟标签大小一样。&lt;strong&gt;缩放不是等比例的，并且缩放完成后，画布的坐标系不变&lt;/strong&gt;。因此最好把canvas标签的css大小和canvas画布大小设置为一致。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://vivimee.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML5" scheme="https://vivimee.github.io/tags/HTML5/"/>
    
      <category term="canvas" scheme="https://vivimee.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>html5-history</title>
    <link href="https://vivimee.github.io/2018/12/02/html5-history/"/>
    <id>https://vivimee.github.io/2018/12/02/html5-history/</id>
    <published>2018-12-02T13:47:23.000Z</published>
    <updated>2018-12-09T01:21:16.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML5-history"><a href="#HTML5-history" class="headerlink" title="HTML5-history"></a>HTML5-history</h2><p>window.history 对象是HTML5提供的用于维护当前标签页浏览历史的对象。主要功能是前进后退和在不刷新页面的情况下，修改地址栏里的URL地址。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>常用的属性只有 history.length， 表示当前标签页浏览历史的长度，初始值是 1。对history.length赋值并不会起作用，也没有任何反应。<br><a id="more"></a></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h4><ol><li>history.back() 后退到上一个页面。当前已经是第一个页面时，调用此函数不会有任何反应。</li><li>history.forward() 进入历史的下一个页面。当前已经是最后一个页面时，调用此函数不会有任何反应。</li><li>history.go(step) step为正前进step个页面，step为负后退step和页面，超过页面历史范围的调用不会有任何反应。</li></ol><h4 id="修改历史（地址栏的URL）"><a href="#修改历史（地址栏的URL）" class="headerlink" title="修改历史（地址栏的URL）"></a>修改历史（地址栏的URL）</h4><ol><li>history.pushState(state, title, url) 不刷新页面并添加一条历史记录，title表示下个页面的标题（貌似目前所有浏览器都忽略state和title）；url表示新的地址。</li><li>history.replaceState(state, title, url) 替换当前地址栏里的url，state和title会被所有浏览器忽略。</li></ol><h3 id="相关事件"><a href="#相关事件" class="headerlink" title="相关事件"></a>相关事件</h3><ol><li>popstate，前进或者后退时会触发。pushState 和 replaceState 不会触发此事件。</li><li>hashchange，当前页面的hash值发生变化时触发。</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li>改变浏览历史，不让用户回退到某个页面。</li><li>前端路由。<br>常用的前端路由是通过hash实现的，history提供了操作历史的api后，就可以通过history来实现了。</li></ol><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>URL各部分的含义：<br><code>https://www.baidu.com/search?word=abc&amp;time=12345#/article/item?title=hello</code><br>host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>origin: <a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a><br>pathname: /search<br>search: ?word=abc&amp;time=12345<br>hash: #/article/item?title=hello  </p><p>向服务器发起请求的时候 hash 部分不会被发送出去，因此需要传递给服务器的query参数必须放到hash前面。而hash后面的参数一般在前端路由时被读取和处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML5-history&quot;&gt;&lt;a href=&quot;#HTML5-history&quot; class=&quot;headerlink&quot; title=&quot;HTML5-history&quot;&gt;&lt;/a&gt;HTML5-history&lt;/h2&gt;&lt;p&gt;window.history 对象是HTML5提供的用于维护当前标签页浏览历史的对象。主要功能是前进后退和在不刷新页面的情况下，修改地址栏里的URL地址。&lt;/p&gt;
&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;p&gt;常用的属性只有 history.length， 表示当前标签页浏览历史的长度，初始值是 1。对history.length赋值并不会起作用，也没有任何反应。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://vivimee.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="history" scheme="https://vivimee.github.io/tags/history/"/>
    
      <category term="HTML5" scheme="https://vivimee.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>树的遍历</title>
    <link href="https://vivimee.github.io/2018/02/03/tree/"/>
    <id>https://vivimee.github.io/2018/02/03/tree/</id>
    <published>2018-02-03T10:03:19.000Z</published>
    <updated>2018-12-09T01:21:03.751Z</updated>
    
    <content type="html"><![CDATA[<p>复习一下树的遍历，以多叉树为例，用java写一下递归和非递归的遍历，以及广度优先遍历。</p><h2 id="定义数据结构"><a href="#定义数据结构" class="headerlink" title="定义数据结构"></a>定义数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Node&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下图的树为例进行遍历<br><img src="http://oipzgwvkn.bkt.clouddn.com/%E6%A0%91%E7%A4%BA%E4%BE%8B.png" alt=""><br><a id="more"></a></p><h2 id="递归先根遍历"><a href="#递归先根遍历" class="headerlink" title="递归先根遍历"></a>递归先根遍历</h2><p>即先打印根节点后打印子节点的值，对于最左侧的子书来说先根遍历打印顺序为：2, 5, 6, 7，对于整棵树来说先根顺序为：1, 2, 5, 6, 7, 3, 8, 9, 10, 4, 11, 12, 13<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 递归先根遍历(Node root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    System.out.print(root.value + <span class="string">", "</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != root.children)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; root.children.size(); ++i)&#123;</span><br><span class="line">            Node node = root.children.get(i);</span><br><span class="line">            递归先根遍历(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出为：1, 2, 5, 6, 7, 3, 8, 9, 10, 4, 11, 12, 13,</span></span><br></pre></td></tr></table></figure></p><h2 id="递归后根遍历"><a href="#递归后根遍历" class="headerlink" title="递归后根遍历"></a>递归后根遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 递归后根遍历(Node root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != root.children)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = root.children.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            Node node = root.children.get(i);</span><br><span class="line">            递归后根遍历(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.print(root.value + <span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出为：13, 12, 11, 4, 10, 9, 8, 3, 7, 6, 5, 2, 1,</span></span><br></pre></td></tr></table></figure><h2 id="循环深度优先遍历"><a href="#循环深度优先遍历" class="headerlink" title="循环深度优先遍历"></a>循环深度优先遍历</h2><p>通过上面的代码可以看到，递归遍历的写法比较简单，但数据量很大的时候递归会消耗过多的性能，因此循环遍历可能用的更广泛。</p><p>以深度优先为例，来思考一下：从根节点开始走，当我们走到节点2的时候，需要把节点3和节点4整个都保存到一个数据结构里，以便我们打印完节点2的子节点之后还能回来。同样，走到节点5的时候需要把节点6和节点7都保存下来。由于节点5没有子节点了，因此开始打印，输出5。因为是深度优先，所以下一步需要打印节点6和节点7，刚才做了保存所以取出来即可。思考到这，我们发现，后保存的节点（6和7）先被访问，因此采用栈来保存我们的节点。下面是代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 循环深度优先遍历(Node root) &#123;</span><br><span class="line">    System.out.print(<span class="string">"循环深度优先遍历：\t"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == root) <span class="keyword">return</span>;</span><br><span class="line">    System.out.print(root.value + <span class="string">", "</span>);</span><br><span class="line"></span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">null</span> != root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != root.children) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; root.children.size() &gt; <span class="number">1</span> &amp;&amp; i &lt; root.children.size(); ++i) &#123;</span><br><span class="line">                Node node = root.children.get(i);</span><br><span class="line">                stack.push(node);</span><br><span class="line">            &#125;</span><br><span class="line">            Node node = root.children.get(<span class="number">0</span>);</span><br><span class="line">            System.out.print(node.value + <span class="string">", "</span>);</span><br><span class="line">            root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            System.out.print(root.value + <span class="string">", "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出： 1, 2, 5, 7, 6, 4, 11, 13, 12, 3, 8, 10, 9,</span></span><br></pre></td></tr></table></figure></p><h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><p>参照深度优先的例子，来思考一下：从节点1开始打印，接着打印2，3，4，当我们打印晚2的时候需要把节点2的子节点都保存到一个数据结构里，一遍打印完4之后再回来。同样，打印完3和4的时候也需要把他们的子节点都保存下来。打印完4之后去打印节点2的子节点，也就是先保存的先被访问，因此采用队列作为保存节点的数据结构。下面是代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 循环广度优先遍历(Node root) &#123;</span><br><span class="line">    System.out.print(<span class="string">"循环广度优先遍历：\t"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == root) <span class="keyword">return</span>;</span><br><span class="line">    System.out.print(root.value + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">null</span> != root &amp;&amp; <span class="keyword">null</span> != root.children) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; root.children.size(); ++i) &#123;</span><br><span class="line">            Node node = root.children.get(i);</span><br><span class="line">            System.out.print(node.value + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != node.children)</span><br><span class="line">                queue.offer(node);</span><br><span class="line">        &#125;</span><br><span class="line">        root = queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里以多叉树为例介绍了数的遍历，同业也是适用于二叉树的。需要注意的是广度优先的时候采用队列来临时保存节点，而深度优先的时候采用栈来临时保存节点。在思考的开始无法确定应该采用何种数据结构，但在后来会总结出应该采用哪种数据结构。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习一下树的遍历，以多叉树为例，用java写一下递归和非递归的遍历，以及广度优先遍历。&lt;/p&gt;
&lt;h2 id=&quot;定义数据结构&quot;&gt;&lt;a href=&quot;#定义数据结构&quot; class=&quot;headerlink&quot; title=&quot;定义数据结构&quot;&gt;&lt;/a&gt;定义数据结构&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Node&amp;gt; children;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下图的树为例进行遍历&lt;br&gt;&lt;img src=&quot;http://oipzgwvkn.bkt.clouddn.com/%E6%A0%91%E7%A4%BA%E4%BE%8B.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://vivimee.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript语言基础</title>
    <link href="https://vivimee.github.io/2018/01/09/jsIntroduce/"/>
    <id>https://vivimee.github.io/2018/01/09/jsIntroduce/</id>
    <published>2018-01-09T12:03:00.000Z</published>
    <updated>2018-12-09T01:21:14.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>写在前面：主要面向对JavaScript了解较少的同学，会介绍常用的JavaScript语法，也会介绍部分ES6的内容，主要为了后续介绍VUE做铺垫。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>ES6版本的JavaScript已经支持块级作用域，块级作用域内用let定义的变量在外部无法访问。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>JavaScript定义变量有三个关键字： <code>var</code>、<code>let</code>和<code>const</code>。var定义的都是全局变量。let定义的变量只在当前作用域内可访问,在外部访问会报错<code>Uncaught ReferenceError</code>。const 用来定义常量。<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> global = <span class="string">'global param'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> local = <span class="string">'local param'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(global); <span class="comment">// global param</span></span><br><span class="line"><span class="built_in">console</span>.log(local); <span class="comment">// Uncaught ReferenceError</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>JavaScript共有5种数据类型，JavaScript引擎会根据变量的赋值自动判断变量的数据类型。可用 <code>typeof</code> 对变量的数据类型进行检测，如： <code>typeof &#39;hello&#39; == &#39;string&#39;</code> 返回 <code>true</code>。</p><ol><li><code>string</code> 字符串</li><li><code>number</code> 数字</li><li><code>bool</code> 布尔值</li><li><code>null</code> 空</li><li><code>undefined</code> （已声明但未定义）。如:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> param;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> param);  <span class="comment">// undefined</span></span><br><span class="line">param = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> param);  <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>在JavaScript中定义函数有多种方法，常见的两种如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is fun1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fun2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;  <span class="comment">//箭头函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is fun2'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在编写JavaScript代码时经常会把一个函数当成另一个函数参数的参数传进去，这时候可以定义一个匿名函数，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'do something'</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.target);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>不同于传统的面向对象语言，JavaScript中没有真正的类的概念，但是有对象的概念，对象可直接定义得到，也可用函数生成。而传统的面向对象语言中的对象都是由类实例化得到的。（ES6中有了class关键字，虽然用法类似，但它和Java、C++中的class完全不同。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接定义对象</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'rick'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    friends: [<span class="string">'Bob'</span>, <span class="string">'Jack'</span>, <span class="string">'Alen'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用函数生成对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Creator</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> Creator(<span class="string">'Sam'</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//空对象</span></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JavaScript内置了一些对象，可以调用它们的api来提高编码的效率,下面介绍两个内置对向和它们的常用api。</p><ol><li><p><code>String</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'I-am-a-string'</span>;  <span class="comment">//定义一个String对象</span></span><br><span class="line"></span><br><span class="line">str.substring(<span class="number">1</span>);   <span class="comment">// -m-a-string</span></span><br><span class="line">str.substring(<span class="number">0</span>, <span class="number">3</span>);    <span class="comment">//I-a</span></span><br><span class="line">str.replace(<span class="regexp">/a/g</span>, <span class="string">'A'</span>); <span class="comment">// I-Am-A-string</span></span><br><span class="line">str.length  <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用 `` 定义字符串，可支持拼接变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'Rick'</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span>;   <span class="comment">// my name is Rick</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];   <span class="comment">//定义一个空数组</span></span><br><span class="line">arr.push(&#123;<span class="attr">name</span>: <span class="string">'rick'</span>&#125;);   <span class="comment">//添加一个对象</span></span><br><span class="line">arr.concat([&#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Alen'</span>&#125;]);    <span class="comment">//连接两个数组,会生成一个新的数组</span></span><br><span class="line">arr.splice(<span class="number">0</span>, <span class="number">1</span>);   <span class="comment">//从0号为开始，删除一个元素</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">0</span>, &#123;<span class="attr">name</span>: <span class="string">'Kate'</span>&#125;);  <span class="comment">//从1号位开始，删除0个元素，并插入&#123;name: 'Kate'&#125;这个元素</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回一个新的数组[2, 4, 6]，原数组arr不变</span></span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    item = item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//原数组arr变成[2, 4, 6]</span></span><br><span class="line"></span><br><span class="line">arr.filter(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> item == <span class="number">2</span>);</span><br><span class="line"><span class="comment">//返回新数组[2],过滤出数组中符合条件的项</span></span><br><span class="line"></span><br><span class="line">arr.some(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> item == <span class="number">4</span>);</span><br><span class="line"><span class="comment">//返回 true ，代表数组中是否有符合条件的项</span></span><br><span class="line"></span><br><span class="line">arr.every(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> item == <span class="number">5</span>);</span><br><span class="line"><span class="comment">//返回 false ，代表是否数组中的每一项都符合条件</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Rick'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name, age);     <span class="comment">// Rick 20</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上述操作定义了一个对象 obj，和两个变量 name, age，并把obj中同名的变量的值赋值到定义的变量中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise是一种处理异步事件的写法规范，主要用来处理网络请求，尤其是有多个并行或者串行的请求时。各种处理请求的库基本都实现了如jquery、axios等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用get方法，向 /users 接口发送请求</span></span><br><span class="line">axios.get(<span class="string">'/users'</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;    <span class="comment">//第一个函数是成功之后会执行的函数</span></span><br><span class="line"></span><br><span class="line">    &#125;, (err) =&gt; &#123;   <span class="comment">//第二函数是失败之后会执行的函数</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>在ES6中，推荐大家把代码写成模块的方式，来提升代码的复用性，模块和Java中的包的概念类似。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FROM = <span class="string">'China'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.come_from = FROM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> User;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./user'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pmm = <span class="keyword">new</span> User(<span class="string">'pmm'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pmm.getName()); <span class="comment">// pmm</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文简单介绍了常用的JavaScript语法和api，适合追求入门和速成的同学。希望深入学习JavaScript可以参考《JavaScript高级程序设计》、《你不知道的JavaScript》、《ES6标准入门》等书籍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;写在前面：主要面向对JavaScript了解较少的同学，会介绍常用的JavaScript语法，也会介绍部分ES6的内容，主要为了后续介绍VUE做铺垫。&lt;/p&gt;
&lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;ES6版本的JavaScript已经支持块级作用域，块级作用域内用let定义的变量在外部无法访问。&lt;/p&gt;
&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;p&gt;JavaScript定义变量有三个关键字： &lt;code&gt;var&lt;/code&gt;、&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;。var定义的都是全局变量。let定义的变量只在当前作用域内可访问,在外部访问会报错&lt;code&gt;Uncaught ReferenceError&lt;/code&gt;。const 用来定义常量。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://vivimee.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="https://vivimee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>在github上部署静态网站</title>
    <link href="https://vivimee.github.io/2018/01/07/gitpage-setup/"/>
    <id>https://vivimee.github.io/2018/01/07/gitpage-setup/</id>
    <published>2018-01-07T04:50:53.000Z</published>
    <updated>2018-12-09T01:20:16.770Z</updated>
    
    <content type="html"><![CDATA[<p>在gitpage上部署静态文件非常方便，而且免费，缺点是有1GB空间大小的限制，编辑发布文章不够可视化。下面简单介绍一下部署过程。</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><blockquote><ul><li>首先要在github上新建一个仓库，命名为 <code>username.github.io</code> 其中username为登录github的用户名。其他选项默认即可。</li><li>创建完成后把代码克隆到本地，在根目录下创建 <code>index.html</code>。编辑内容如下：<a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>之后提交push到远程master分支之后即可访问 <code>https://username.github.io</code>查看效果。</li></ul></blockquote><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>可以将多个域名指向到部署的gitpage上，需要两步即可：</p><blockquote><ul><li>在<code>source</code>目录下新建一个CNAME文件，无后缀名，内容为域名的地址，如 <code>blog.pmm.com</code>。</li><li>添加域名解析规则，将 <code>blog.pmm.com</code> 指向到 <code>username.github.io</code>。<br>访问 <code>blog.pmm.com</code>查看效果</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在gitpage上部署静态文件非常方便，而且免费，缺点是有1GB空间大小的限制，编辑发布文章不够可视化。下面简单介绍一下部署过程。&lt;/p&gt;
&lt;h2 id=&quot;新建仓库&quot;&gt;&lt;a href=&quot;#新建仓库&quot; class=&quot;headerlink&quot; title=&quot;新建仓库&quot;&gt;&lt;/a&gt;新建仓库&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先要在github上新建一个仓库，命名为 &lt;code&gt;username.github.io&lt;/code&gt; 其中username为登录github的用户名。其他选项默认即可。&lt;/li&gt;
&lt;li&gt;创建完成后把代码克隆到本地，在根目录下创建 &lt;code&gt;index.html&lt;/code&gt;。编辑内容如下：
    
    </summary>
    
      <category term="技术" scheme="https://vivimee.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
